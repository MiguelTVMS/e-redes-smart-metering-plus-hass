[build-system]
requires = ["setuptools>=45", "wheel", "setuptools_scm[toml]>=6.2"]
build-backend = "setuptools.build_meta"

[project]
name = "e-redes-smart-metering-plus-hass"
description = "Home Assistant integration for E-Redes Smart Metering Plus"
readme = "README.md"
requires-python = ">=3.11"
license = { text = "MIT" }
authors = [
    { name = "Miguel Silva", email = "miguel@example.com" }
]
keywords = ["home-assistant", "e-redes", "smart-metering", "energy"]
classifiers = [
    "Development Status :: 4 - Beta",
    "Intended Audience :: End Users/Desktop",
    "License :: OSI Approved :: MIT License",
    "Operating System :: OS Independent",
    "Programming Language :: Python :: 3.11",
    "Programming Language :: Python :: 3.12",
    "Topic :: Home Automation"
]
dynamic = ["version"]

[tool.setuptools_scm]
write_to = "custom_components/e_redes_smart_metering_plus/_version.py"

[tool.black]
target-version = ["py311"]
line-length = 88
extend-exclude = "/generated/"

[tool.isort]
profile = "black"
force_sort_within_sections = true
known_first_party = ["homeassistant"]
forced_separate = ["tests"]
combine_as_imports = true

[tool.pylint.MASTER]
py-version = "3.11"
ignore = ["tests"]
jobs = 2
init-hook = """\
import sys; sys.path.append(".")
"""
load-plugins = [
    "pylint.extensions.code_style",
    "pylint.extensions.typing"
]
persistent = false
extension-pkg-allow-list = ["orjson"]

[tool.pylint.BASIC]
class-const-naming-style = "any"
good-names = ["_", "ev", "ex", "fp", "i", "id", "j", "k", "Run", "T"]

[tool.pylint.CODE_STYLE]
max-line-length-suggestions = 72

[tool.pylint."MESSAGES CONTROL"]
disable = [
    "format",
    "abstract-class-little-used",
    "abstract-method",
    "cyclic-import",
    "duplicate-code",
    "inconsistent-return-statements",
    "locally-disabled",
    "not-context-manager",
    "too-few-public-methods",
    "too-many-ancestors",
    "too-many-arguments",
    "too-many-branches",
    "too-many-instance-attributes",
    "too-many-lines",
    "too-many-locals",
    "too-many-public-methods",
    "too-many-return-statements",
    "too-many-statements",
    "too-many-boolean-expressions",
    "unused-argument",
    "wrong-import-order",
    "consider-using-f-string",
    "consider-using-namedtuple-or-dataclass",
    "consider-using-assignment-expr"
]
enable = ["use-symbolic-message-instead"]

[tool.pylint.REPORTS]
score = false

[tool.pylint.TYPECHECK]
ignored-classes = ["_CountingAttr"]
mixin-class-rgx = ".*[Mm]ixin"

[tool.pylint.FORMAT]
expected-line-ending-format = "LF"

[tool.pytest.ini_options]
testpaths = ["tests"]
norecursedirs = [".git", "testing_config"]
log_format = "%(asctime)s.%(msecs)03d %(levelname)-8s %(threadName)s %(name)s:%(filename)s:%(lineno)s %(message)s"
log_date_format = "%Y-%m-%d %H:%M:%S"
asyncio_mode = "auto"

[tool.ruff]
target-version = "py311"
line-length = 88

[tool.ruff.lint]
select = [
    "B007", "B014", "C", "D", "E", "F", "ICN001", "PGH004", "PLC0414",
    "SIM105", "SIM117", "SIM118", "SIM201", "SIM212", "SIM300", "SIM401",
    "T20", "TRY004", "RUF006", "UP", "W"
]
ignore = [
    "D202", "D203", "D213", "D406", "D407", "E501", "E731"
]

[tool.ruff.lint.mccabe]
max-complexity = 25
